import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchProductDetailById, fetchProducts } from '../services/itemsAPI';


const initialState = {
  items: [],
  categories: [],
  product: null,
  working: false,
  error: null
};

// The function below is called a thunk and allows us to perform async logic. It
export const fetchSearchProducts = createAsyncThunk(
  'items/fetchSearchProducts',
  async (search) => {
    const { data } = await fetchProducts(search);
    const { items, categories } = data;
    // The value we return becomes the `fulfilled` action payload
    return {
      items: items.filter((prod, i) => i < 4),
      categories,
    }
  }
);

export const fetchProductDetail = createAsyncThunk(
  'items/fetchProductDetail',
  async (id) => {
    // The value we return becomes the `fulfilled` action payload
    return await fetchProductDetailById(id);
  }
);

export const itemsSlice = createSlice({
  name: 'items',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    cleanItems: () => initialState,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    // LIst
    builder
      .addCase(fetchSearchProducts.pending, (state) => ({
        ...state,
        items: [],
        categories: [],
        working: true,
        error: '',
      }))
      .addCase(fetchSearchProducts.fulfilled, (state, action) => {
        const { items, categories } = action.payload;
        state.product = null
        state.working = false
        state.items = items
        state.categories = categories
      })
      .addCase(fetchSearchProducts.rejected, (state, action) => {
        state.working = false;
        state.error = action.error.message;
      });

    // Detail
    builder
      .addCase(fetchProductDetail.pending, (state) => ({
        ...state,
        working: true,
        error: '',
        product: null
      }))
      .addCase(fetchProductDetail.fulfilled, (state, action) => {
        const { product } = action.payload;
        state.product = product
        state.working = false
      })
      .addCase(fetchProductDetail.rejected, (state, action) => {
        state.working = false;
        state.error = action.error.message;
      });
  },
});

export const { cleanItems } = itemsSlice.actions;

export const selectWorking = (state) => state.items.working;
export const selectItems = (state) => state.items.items;
export const selectProduct = (state) => state.items.product;
export const selectCategories = (state) => state.items.categories;
export const selectError = (state) => state.items.error;

export default itemsSlice.reducer;
