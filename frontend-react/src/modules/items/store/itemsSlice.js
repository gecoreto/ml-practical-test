import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchProducts } from './itemsAPI';


const initialState = {
  items: [],
  categories: [],
  product: null,
  working: false
};

// The function below is called a thunk and allows us to perform async logic. It
export const fetchSearchProducts = createAsyncThunk(
  'items/fetchSearchProducts',
  async (amount) => {
    const response = await fetchProducts(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const itemsSlice = createSlice({
  name: 'items',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchSearchProducts.pending, (state) => ({
        ...state,
        items: [],
        categories: [],
        working: true,
        msg: '',
      }))
      .addCase(fetchSearchProducts.fulfilled, (state, action) => {
        const { items, categories } = action.payload;
        state.product = null
        state.working = false
        state.items = items
        state.categories = categories
      })
      .addCase(fetchSearchProducts.rejected, (state, action) => {
        state.working = false;
        state.msg += action.error.message;
      });
  },
});

// export const {  } = itemsSlice.actions;

export const selectWorking = (state) => state.items.working;

export default itemsSlice.reducer;
